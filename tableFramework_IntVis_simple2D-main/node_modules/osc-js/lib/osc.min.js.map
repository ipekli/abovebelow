{"version":3,"file":"osc.min.js","sources":["../src/common/utils.js","../src/common/helpers.js","../src/atomic.js","../src/atomic/int32.js","../src/atomic/string.js","../src/atomic/timetag.js","../src/atomic/blob.js","../src/atomic/float32.js","../src/message.js","../src/bundle.js","../src/packet.js","../src/events.js","../src/plugin/dgram.js","../src/plugin/bridge.js","../src/plugin/wsclient.js","../src/plugin/wsserver.js","../src/osc.js"],"sourcesContent":["/**\n * Check if given object is an integer number\n * @param {*} n\n * @return {boolean}\n */\nexport function isInt(n) {\n  return Number(n) === n && n % 1 === 0\n}\n\n/**\n * Check if given object is a float number\n * @param {*} n\n * @return {boolean}\n */\nexport function isFloat(n) {\n  return Number(n) === n && n % 1 !== 0\n}\n\n/**\n * Check if given object is a string\n * @param {*} n\n * @return {boolean}\n */\nexport function isString(n) {\n  return typeof n === 'string'\n}\n\n/**\n * Check if given object is an array\n * @param {*} n\n * @return {boolean}\n */\nexport function isArray(n) {\n  return Object.prototype.toString.call(n) === '[object Array]'\n}\n\n/**\n * Check if given object is an object\n * @param {*} n\n * @return {boolean}\n */\nexport function isObject(n) {\n  return Object.prototype.toString.call(n) === '[object Object]'\n}\n\n/**\n * Check if given object is a function\n * @param {*} n\n * @return {boolean}\n */\nexport function isFunction(n) {\n  return typeof n === 'function'\n}\n\n/**\n * Check if given object is a Uint8Array\n * @param {*} n\n * @return {boolean}\n */\nexport function isBlob(n) {\n  return n instanceof Uint8Array\n}\n\n/**\n * Check if given object is a Date\n * @param {*} n\n * @return {boolean}\n */\nexport function isDate(n) {\n  return n instanceof Date\n}\n\n/**\n * Check if given object is undefined\n * @param {*} n\n * @return {boolean}\n */\nexport function isUndefined(n) {\n  return typeof n === 'undefined'\n}\n\n/**\n * Return the next multiple of four\n * @param {number} n\n */\nexport function pad(n) {\n  return (n + 3) & ~0x03\n}\n\n/**\n * Checks if environment provides a feature\n * @param {string} name Name of needed feature\n * @return {boolean}\n */\nexport function hasProperty(name) {\n  return Object.prototype.hasOwnProperty.call(\n    (typeof global !== 'undefined' ? global : window), // eslint-disable-line no-undef\n    name,\n  )\n}\n\n/**\n * Wrap binary data in DataView\n * @param {*} obj\n * @return {DataView}\n */\nexport function dataView(obj) {\n  if (obj.buffer) {\n    return new DataView(obj.buffer)\n  } else if (obj instanceof ArrayBuffer) {\n    return new DataView(obj)\n  }\n\n  return new DataView(new Uint8Array(obj))\n}\n","import {\n  isArray,\n  isBlob,\n  isFloat,\n  isInt,\n  isString,\n} from './utils'\n\n/**\n * Checks type of given object and returns the regarding OSC\n * Type tag character\n * @param {*} item Any object\n * @return {string} OSC Type tag character\n */\nexport function typeTag(item) {\n  if (isInt(item)) {\n    return 'i'\n  } else if (isFloat(item)) {\n    return 'f'\n  } else if (isString(item)) {\n    return 's'\n  } else if (isBlob(item)) {\n    return 'b'\n  }\n\n  throw new Error('OSC typeTag() found unknown value type')\n}\n\n/**\n * Sanitizes an OSC-ready Address Pattern\n * @param {array|string} obj Address as string or array of strings\n * @return {string} Corrected address string\n *\n * @example\n * // all calls return '/test/path' string:\n * prepareAddress('test/path')\n * prepareAddress('/test/path/')\n * prepareAddress([test, path])\n */\nexport function prepareAddress(obj) {\n  let address = ''\n\n  if (isArray(obj)) {\n    return `/${obj.join('/')}`\n  } else if (isString(obj)) {\n    address = obj\n\n    // remove slash at ending of address\n    if (address.length > 1 && address[address.length - 1] === '/') {\n      address = address.slice(0, address.length - 1)\n    }\n\n    // add slash at beginning of address\n    if (address.length > 1 && address[0] !== '/') {\n      address = `/${address}`\n    }\n\n    return address\n  }\n\n  throw new Error('OSC prepareAddress() needs addresses of type array or string')\n}\n\n/**\n * Make an OSC address pattern javascript-regex-ready\n * @param {string} str OSC address pattern\n * @return {string} Javascript RegEx string\n */\nexport function prepareRegExPattern(str) {\n  let pattern\n\n  if (!(isString(str))) {\n    throw new Error('OSC prepareRegExPattern() needs strings')\n  }\n\n  pattern = str.replace(/\\./g, '\\\\.')\n  pattern = pattern.replace(/\\(/g, '\\\\(')\n  pattern = pattern.replace(/\\)/g, '\\\\)')\n\n  pattern = pattern.replace(/\\{/g, '(')\n  pattern = pattern.replace(/\\}/g, ')')\n  pattern = pattern.replace(/,/g, '|')\n\n  pattern = pattern.replace(/\\[!/g, '[^')\n\n  pattern = pattern.replace(/\\?/g, '.')\n  pattern = pattern.replace(/\\*/g, '.*')\n\n  return pattern\n}\n\n/**\n * Holds a list of items and helps to merge them\n * into a single array of packed binary data\n */\nexport default class EncodeHelper {\n  /**\n   * Create a new EncodeHelper instance\n   */\n  constructor() {\n    /** @type {array} data */\n    this.data = []\n    /** @type {number} byteLength */\n    this.byteLength = 0\n  }\n\n  /**\n   * Packs an item and adds it to the list\n   * @param {*} item Any object\n   * @return {EncodeHelper}\n   */\n  add(item) {\n    const buffer = item.pack()\n    this.byteLength += buffer.byteLength\n    this.data.push(buffer)\n\n    return this\n  }\n\n  /**\n   * Merge all added items into one Uint8Array\n   * @return {Uint8Array} Merged binary data array of all items\n   */\n  merge() {\n    const result = new Uint8Array(this.byteLength)\n    let offset = 0\n\n    this.data.forEach((data) => {\n      result.set(data, offset)\n      offset += data.byteLength\n    })\n\n    return result\n  }\n}\n","import { isUndefined } from './common/utils'\n\n/**\n * Base class for OSC Atomic Data Types\n */\nexport default class Atomic {\n  /**\n   * Create an Atomic instance\n   * @param {*} [value] Initial value of any type\n   */\n  constructor(value) {\n    /** @type {*} value */\n    this.value = value\n    /** @type {number} offset */\n    this.offset = 0\n  }\n\n  /**\n   * Interpret the given value of this entity as packed binary data\n   * @param {string} method The DataView method to write to the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @return {Uint8Array} Packed binary data\n   */\n  pack(method, byteLength) {\n    if (!(method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be packed without given method or byteLength')\n    }\n\n    const data = new Uint8Array(byteLength)\n    const dataView = new DataView(data.buffer)\n\n    if (isUndefined(this.value)) {\n      throw new Error('OSC Atomic cant\\'t be encoded with empty value')\n    }\n\n    // use DataView to write to ArrayBuffer\n    dataView[method](this.offset, this.value, false)\n\n    // always return binary Uint8Array after packing\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView according to the given format\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {string} method The DataView method to read the format from the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, method, byteLength, initialOffset = 0) {\n    if (!(dataView && method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be unpacked without given dataView, method or byteLength')\n    }\n\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Atomic expects an instance of type DataView')\n    }\n\n    // use DataView to read from ArrayBuffer and add offset\n    this.value = dataView[method](initialOffset, false)\n    this.offset = initialOffset + byteLength\n\n    // always return offset number after unpacking\n    return this.offset\n  }\n}\n","import { isInt } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicInt32 extends Atomic {\n  /**\n   * Create an AtomicInt32 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && !isInt(value)) {\n      throw new Error('OSC AtomicInt32 constructor expects value of type number')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setInt32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Int32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getInt32', 4, initialOffset)\n  }\n}\n","import {\n  hasProperty,\n  isString,\n  isUndefined,\n  pad,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** Slice size of large strings for fallback method */\nconst STR_SLICE_SIZE = 65537\n\n/** Text encoding format */\nconst STR_ENCODING = 'utf-8'\n\n/**\n * Helper method to decode a string using different methods depending on environment\n * @param {array} charCodes Array of char codes\n * @return {string} Decoded string\n */\nfunction charCodesToString(charCodes) {\n  // Use these methods to be able to convert large strings\n  if (hasProperty('Buffer')) {\n    return Buffer.from(charCodes).toString(STR_ENCODING)\n  } else if (hasProperty('TextDecoder')) {\n    return new TextDecoder(STR_ENCODING) // eslint-disable-line no-undef\n      .decode(new Int8Array(charCodes))\n  }\n\n  // Fallback method\n  let str = ''\n\n  for (let i = 0; i < charCodes.length; i += STR_SLICE_SIZE) {\n    str += String.fromCharCode.apply(\n      null,\n      charCodes.slice(i, i + STR_SLICE_SIZE),\n    )\n  }\n\n  return str\n}\n\n/**\n * A sequence of non-null ASCII characters OSC Atomic Data Type\n */\nexport default class AtomicString extends Atomic {\n  /**\n   * Create an AtomicString instance\n   * @param {string} [value] Initial string value\n   */\n  constructor(value) {\n    if (value && !isString(value)) {\n      throw new Error('OSC AtomicString constructor expects value of type string')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given string as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicString can not be encoded with empty value')\n    }\n\n    // add 0-3 null characters for total number of bits a multiple of 32\n    const terminated = `${this.value}\\u0000`\n    const byteLength = pad(terminated.length)\n\n    const buffer = new Uint8Array(byteLength)\n\n    for (let i = 0; i < terminated.length; i += 1) {\n      buffer[i] = terminated.charCodeAt(i)\n    }\n\n    return buffer\n  }\n\n  /**\n   * Unpack binary data from DataView and read a string\n   * @param {DataView} dataView The DataView holding the binary representation of the string\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicString expects an instance of type DataView')\n    }\n\n    let offset = initialOffset\n    let charcode\n    const charCodes = []\n\n    for (; offset < dataView.byteLength; offset += 1) {\n      charcode = dataView.getUint8(offset)\n\n      // check for terminating null character\n      if (charcode !== 0) {\n        charCodes.push(charcode)\n      } else {\n        offset += 1\n        break\n      }\n    }\n\n    if (offset === dataView.length) {\n      throw new Error('OSC AtomicString found a malformed OSC string')\n    }\n\n    /** @type {number} offset */\n    this.offset = pad(offset)\n    /** @type {string} value */\n    this.value = charCodesToString(charCodes)\n\n    return this.offset\n  }\n}\n","import {\n  isDate,\n  isInt,\n  isUndefined,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** 70 years in seconds */\nexport const SECONDS_70_YEARS = 2208988800\n/** 2^32 */\nexport const TWO_POWER_32 = 4294967296\n\n/**\n * Timetag helper class for representing NTP timestamps\n * and conversion between them and javascript representation\n */\nexport class Timetag {\n  /**\n   * Create a Timetag instance\n   * @param {number} [seconds=0] Initial NTP *seconds* value\n   * @param {number} [fractions=0] Initial NTP *fractions* value\n   */\n  constructor(seconds = 0, fractions = 0) {\n    if (!(isInt(seconds) && isInt(fractions))) {\n      throw new Error('OSC Timetag constructor expects values of type integer number')\n    }\n\n    /** @type {number} seconds */\n    this.seconds = seconds\n    /** @type {number} fractions */\n    this.fractions = fractions\n  }\n\n  /**\n   * Converts from NTP to JS representation and back\n   * @param {number} [milliseconds] Converts from JS milliseconds to NTP.\n   * Leave empty for converting from NTP to JavaScript representation\n   * @return {number} Javascript timestamp\n   */\n  timestamp(milliseconds) {\n    let seconds\n\n    if (typeof milliseconds === 'number') {\n      seconds = milliseconds / 1000\n      const rounded = Math.floor(seconds)\n\n      this.seconds = rounded + SECONDS_70_YEARS\n      this.fractions = Math.round(TWO_POWER_32 * (seconds - rounded))\n\n      return milliseconds\n    }\n\n    seconds = this.seconds - SECONDS_70_YEARS\n    return (seconds + Math.round(this.fractions / TWO_POWER_32)) * 1000\n  }\n}\n\n/**\n * 64-bit big-endian fixed-point time tag, semantics\n * defined below OSC Atomic Data Type\n */\nexport default class AtomicTimetag extends Atomic {\n  /**\n   * Create a AtomicTimetag instance\n   * @param {number|Timetag|Date} [value] Initial date, leave empty if\n   * you want it to be the current date\n   */\n  constructor(value = Date.now()) {\n    let timetag = new Timetag()\n\n    if (value instanceof Timetag) {\n      timetag = value\n    } else if (isInt(value)) {\n      timetag.timestamp(value)\n    } else if (isDate(value)) {\n      timetag.timestamp(value.getTime())\n    }\n\n    super(timetag)\n  }\n\n  /**\n   * Interpret the given timetag as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicTimetag can not be encoded with empty value')\n    }\n\n    const { seconds, fractions } = this.value\n    const data = new Uint8Array(8)\n    const dataView = new DataView(data.buffer)\n\n    dataView.setInt32(0, seconds, false)\n    dataView.setInt32(4, fractions, false)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a timetag\n   * @param {DataView} dataView The DataView holding the binary representation of the timetag\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicTimetag expects an instance of type DataView')\n    }\n\n    const seconds = dataView.getUint32(initialOffset, false)\n    const fractions = dataView.getUint32(initialOffset + 4, false)\n\n    /** @type {Timetag} value */\n    this.value = new Timetag(seconds, fractions)\n    /** @type {number} offset */\n    this.offset = initialOffset + 8\n\n    return this.offset\n  }\n}\n","import {\n  isBlob,\n  isUndefined,\n  pad,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 8-bit bytes of arbitrary binary data OSC Atomic Data Type\n */\nexport default class AtomicBlob extends Atomic {\n  /**\n   * Create an AtomicBlob instance\n   * @param {Uint8Array} [value] Binary data\n   */\n  constructor(value) {\n    if (value && !isBlob(value)) {\n      throw new Error('OSC AtomicBlob constructor expects value of type Uint8Array')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given blob as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicBlob can not be encoded with empty value')\n    }\n\n    const byteLength = pad(this.value.byteLength)\n    const data = new Uint8Array(byteLength + 4)\n    const dataView = new DataView(data.buffer)\n\n    // an int32 size count\n    dataView.setInt32(0, this.value.byteLength, false)\n    // followed by 8-bit bytes of arbitrary binary data\n    data.set(this.value, 4)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a blob\n   * @param {DataView} dataView The DataView holding the binary representation of the blob\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicBlob expects an instance of type DataView')\n    }\n\n    const byteLength = dataView.getInt32(initialOffset, false)\n\n    /** @type {Uint8Array} value */\n    this.value = new Uint8Array(dataView.buffer, initialOffset + 4, byteLength)\n    /** @type {number} offset */\n    this.offset = pad(initialOffset + 4 + byteLength)\n\n    return this.offset\n  }\n}\n","import { isFloat } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian IEEE 754 floating point number OSC Atomic Data Type\n */\nexport default class AtomicFloat32 extends Atomic {\n  /**\n   * Create an AtomicFloat32 instance\n   * @param {number} [value] Float number\n   */\n  constructor(value) {\n    if (value && !isFloat(value)) {\n      throw new Error('OSC AtomicFloat32 constructor expects value of type float')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setFloat32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Float32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getFloat32', 4, initialOffset)\n  }\n}\n","import {\n  isArray,\n  isBlob,\n  isFloat,\n  isInt,\n  isString,\n  isUndefined,\n} from './common/utils'\n\nimport Helper, { typeTag, prepareAddress } from './common/helpers'\n\nimport AtomicBlob from './atomic/blob'\nimport AtomicFloat32 from './atomic/float32'\nimport AtomicInt32 from './atomic/int32'\nimport AtomicString from './atomic/string'\n\n/**\n * An OSC message consists of an OSC Address Pattern followed\n * by an OSC Type Tag String followed by zero or more OSC Arguments\n */\nexport default class Message {\n  /**\n   * Create a Message instance\n   * @param {array|string} args Address\n   * @param {...*} args OSC Atomic Data Types\n   *\n   * @example\n   * const message = new Message(['test', 'path'], 50, 100.52, 'test')\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   */\n  constructor(...args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {string} address */\n    this.address = ''\n    /** @type {string} types */\n    this.types = ''\n    /** @type {array} args */\n    this.args = []\n\n    if (args.length > 0) {\n      if (!(isString(args[0]) || isArray(args[0]))) {\n        throw new Error('OSC Message constructor first argument (address) must be a string or array')\n      }\n\n      this.address = prepareAddress(args.shift())\n      this.types = args.map((item) => typeTag(item)).join('')\n      this.args = args\n    }\n  }\n\n  /**\n   * Add an OSC Atomic Data Type to the list of elements\n   * @param {*} item\n   */\n  add(item) {\n    if (isUndefined(item)) {\n      throw new Error('OSC Message needs a valid OSC Atomic Data Type')\n    }\n\n    this.args.push(item)\n    this.types += typeTag(item)\n  }\n\n  /**\n   * Interpret the Message as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (this.address.length === 0 || this.address[0] !== '/') {\n      throw new Error('OSC Message has an invalid address')\n    }\n\n    const encoder = new Helper()\n\n    // OSC Address Pattern and Type string\n    encoder.add(new AtomicString(this.address))\n    encoder.add(new AtomicString(`,${this.types}`))\n\n    // followed by zero or more OSC Arguments\n    if (this.args.length > 0) {\n      let argument\n\n      this.args.forEach((value) => {\n        if (isInt(value)) {\n          argument = new AtomicInt32(value)\n        } else if (isFloat(value)) {\n          argument = new AtomicFloat32(value)\n        } else if (isString(value)) {\n          argument = new AtomicString(value)\n        } else if (isBlob(value)) {\n          argument = new AtomicBlob(value)\n        } else {\n          throw new Error('OSC Message found unknown argument type')\n        }\n\n        encoder.add(argument)\n      })\n    }\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Message\n   * @param {DataView} dataView The DataView holding the binary representation of a Message\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Message expects an instance of type DataView.')\n    }\n\n    // read address pattern\n    const address = new AtomicString()\n    address.unpack(dataView, initialOffset)\n\n    // read type string\n    const types = new AtomicString()\n    types.unpack(dataView, address.offset)\n\n    if (address.value.length === 0 || address.value[0] !== '/') {\n      throw new Error('OSC Message found malformed or missing address string')\n    }\n\n    if (types.value.length === 0 && types.value[0] !== ',') {\n      throw new Error('OSC Message found malformed or missing type string')\n    }\n\n    let { offset } = types\n    let next\n    let type\n\n    const args = []\n\n    // read message arguments (OSC Atomic Data Types)\n    for (let i = 1; i < types.value.length; i += 1) {\n      type = types.value[i]\n\n      if (type === 'i') {\n        next = new AtomicInt32()\n      } else if (type === 'f') {\n        next = new AtomicFloat32()\n      } else if (type === 's') {\n        next = new AtomicString()\n      } else if (type === 'b') {\n        next = new AtomicBlob()\n      } else {\n        throw new Error('OSC Message found non-standard argument type')\n      }\n\n      offset = next.unpack(dataView, offset)\n      args.push(next.value)\n    }\n\n    this.offset = offset\n    this.address = address.value\n    this.types = types.value\n    this.args = args\n\n    return this.offset\n  }\n}\n","import EncodeHelper from './common/helpers'\nimport { isArray, isInt } from './common/utils'\n\nimport AtomicInt32 from './atomic/int32'\nimport AtomicString from './atomic/string'\nimport AtomicTimetag from './atomic/timetag'\nimport Message from './message'\n\n/** OSC Bundle string */\nexport const BUNDLE_TAG = '#bundle'\n\n/**\n * An OSC Bundle consist of a Timetag and one or many Bundle Elements.\n * The elements are either OSC Messages or more OSC Bundles\n */\nexport default class Bundle {\n  /**\n   * Create a Bundle instance\n   * @param {...*} [args] Timetag and elements. See examples for options\n   *\n   * @example\n   * const bundle = new Bundle(new Date() + 500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherBundle = new Bundle([message], Date.now() + 1500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherMessage = new Message('/test/message', 'test', 12)\n   * const anotherBundle = new Bundle(message, anotherMessage)\n   */\n  constructor(...args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {AtomicTimetag} timetag */\n    this.timetag = new AtomicTimetag()\n    /** @type {array} bundleElements */\n    this.bundleElements = []\n\n    if (args.length > 0) {\n      // first argument is an Date or js timestamp (number)\n      if (args[0] instanceof Date || isInt(args[0])) {\n        this.timetag = new AtomicTimetag(args[0])\n      } else if (isArray(args[0])) {\n        // first argument is an Array of Bundle elements\n        args[0].forEach((item) => {\n          this.add(item)\n        })\n\n        // second argument is an Date or js timestamp (number)\n        if (args.length > 1 && (args[1] instanceof Date || isInt(args[0]))) {\n          this.timetag = new AtomicTimetag(args[1])\n        }\n      } else {\n        // take all arguments as Bundle elements\n        args.forEach((item) => {\n          this.add(item)\n        })\n      }\n    }\n  }\n\n  /**\n   * Take a JavaScript timestamp to set the Bundle's timetag\n   * @param {number} ms JS timestamp in milliseconds\n   *\n   * @example\n   * const bundle = new Bundle()\n   * bundle.timestamp(Date.now() + 5000) // in 5 seconds\n   */\n  timestamp(ms) {\n    if (!isInt(ms)) {\n      throw new Error('OSC Bundle needs an integer for setting the timestamp')\n    }\n\n    this.timetag = new AtomicTimetag(ms)\n  }\n\n  /**\n   * Add a Message or Bundle to the list of elements\n   * @param {Bundle|Message} item\n   */\n  add(item) {\n    if (!(item instanceof Message || item instanceof Bundle)) {\n      throw new Error('OSC Bundle contains only Messages and Bundles')\n    }\n\n    this.bundleElements.push(item)\n  }\n\n  /**\n   * Interpret the Bundle as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    const encoder = new EncodeHelper()\n\n    // an OSC Bundle consists of the OSC-string \"#bundle\"\n    encoder.add(new AtomicString(BUNDLE_TAG))\n\n    // followed by an OSC Time Tag\n    if (!this.timetag) {\n      this.timetag = new AtomicTimetag()\n    }\n\n    encoder.add(this.timetag)\n\n    // followed by zero or more OSC Bundle Elements\n    this.bundleElements.forEach((item) => {\n      encoder.add(new AtomicInt32(item.pack().byteLength))\n      encoder.add(item)\n    })\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Bundle\n   * @param {DataView} dataView The DataView holding the binary representation of a Bundle\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Bundle expects an instance of type DataView')\n    }\n\n    // read the beginning bundle string\n    const parentHead = new AtomicString()\n    parentHead.unpack(dataView, initialOffset)\n\n    if (parentHead.value !== BUNDLE_TAG) {\n      throw new Error('OSC Bundle does not contain a valid #bundle head')\n    }\n\n    // read the timetag\n    const timetag = new AtomicTimetag()\n    let offset = timetag.unpack(dataView, parentHead.offset)\n\n    // read the bundle elements\n    this.bundleElements = []\n\n    while (offset < dataView.byteLength) {\n      const head = new AtomicString()\n      const size = new AtomicInt32()\n\n      offset = size.unpack(dataView, offset)\n\n      // check if Packet is a Bundle or a Message\n      let item\n      head.unpack(dataView, offset)\n\n      if (head.value === BUNDLE_TAG) {\n        item = new Bundle()\n      } else {\n        item = new Message()\n      }\n\n      offset = item.unpack(dataView, offset)\n\n      this.bundleElements.push(item)\n    }\n\n    this.offset = offset\n    this.timetag = timetag\n\n    return this.offset\n  }\n}\n","import AtomicString from './atomic/string'\nimport Bundle, { BUNDLE_TAG } from './bundle'\nimport Message from './message'\n\n/**\n * The unit of transmission of OSC is an OSC Packet. The contents\n * of an OSC packet must be either an OSC Message or an OSC Bundle\n */\nexport default class Packet {\n  /**\n   * Create a Packet instance holding a Message or Bundle\n   * @param {Message|Bundle} [value] Initial Packet value\n   */\n  constructor(value) {\n    if (value && !(value instanceof Message || value instanceof Bundle)) {\n      throw new Error('OSC Packet value has to be Message or Bundle')\n    }\n\n    /** @type {Message|Bundle} value */\n    this.value = value\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n  }\n\n  /**\n   * Packs the Packet value. This implementation is more like\n   * a wrapper due to OSC specifications, you could also skip the\n   * Packet and directly work with the Message or Bundle instance\n   * @return {Uint8Array} Packed binary data\n   *\n   * @example\n   * const message = new Message('/test/path', 21.5, 'test')\n   * const packet = new Packet(message)\n   * const packetBinary = packet.pack() // then send it via udp etc.\n   *\n   * // or skip the Packet for convenience\n   * const messageBinary = message.pack()\n   */\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC Packet can not be encoded with empty body')\n    }\n\n    return this.value.pack()\n  }\n\n  /**\n   * Unpack binary data from DataView to read Messages or Bundles\n   * @param {DataView} dataView The DataView holding a binary representation of a Packet\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Packet expects an instance of type DataView')\n    }\n\n    if (dataView.byteLength % 4 !== 0) {\n      throw new Error('OSC Packet byteLength has to be a multiple of four')\n    }\n\n    const head = new AtomicString()\n    head.unpack(dataView, initialOffset)\n\n    let item\n\n    // check if Packet is a Bundle or a Message\n    if (head.value === BUNDLE_TAG) {\n      item = new Bundle()\n    } else {\n      item = new Message()\n    }\n\n    item.unpack(dataView, initialOffset)\n\n    this.offset = item.offset\n    this.value = item\n\n    return this.offset\n  }\n}\n","import {\n  dataView,\n  isArray,\n  isFunction,\n  isInt,\n  isString,\n} from './common/utils'\n\nimport {\n  prepareAddress,\n  prepareRegExPattern,\n} from './common/helpers'\n\nimport Bundle from './bundle'\nimport Message from './message'\nimport Packet from './packet'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  discardLateMessages: false,\n}\n\n/**\n * EventHandler to notify listeners on matching OSC messages and\n * status changes of plugins\n */\nexport default class EventHandler {\n  /**\n   * Create an EventHandler instance\n   * @param {object} options Custom options\n   */\n  constructor(options) {\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n    /**\n     * @type {array} addressHandlers\n     * @private\n     */\n    this.addressHandlers = []\n    /**\n     * @type {object} eventHandlers\n     * @private\n     */\n    this.eventHandlers = {\n      open: [],\n      error: [],\n      close: [],\n    }\n    /**\n     * @type {number} uuid\n     * @private\n     */\n    this.uuid = 0\n  }\n\n  /**\n   * Internally used method to dispatch OSC Packets. Extracts\n   * given Timetags and dispatches them accordingly\n   * @param {Packet} packet\n   * @param {*} [rinfo] Remote address info\n   * @return {boolean} Success state\n   * @private\n   */\n  dispatch(packet, rinfo) {\n    if (!(packet instanceof Packet)) {\n      throw new Error('OSC EventHander dispatch() accepts only arguments of type Packet')\n    }\n\n    if (!packet.value) {\n      throw new Error('OSC EventHander dispatch() can\\'t read empty Packets')\n    }\n\n    if (packet.value instanceof Bundle) {\n      const bundle = packet.value\n\n      return bundle.bundleElements.forEach((bundleItem) => {\n        if (bundleItem instanceof Bundle) {\n          if (bundle.timetag.value.timestamp() < bundleItem.timetag.value.timestamp()) {\n            throw new Error('OSC Bundle timestamp is older than the timestamp of enclosed Bundles')\n          }\n          return this.dispatch(bundleItem)\n        } else if (bundleItem instanceof Message) {\n          const message = bundleItem\n          return this.notify(\n            message.address,\n            message,\n            bundle.timetag.value.timestamp(),\n            rinfo,\n          )\n        }\n\n        throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n      })\n    } else if (packet.value instanceof Message) {\n      const message = packet.value\n      return this.notify(message.address, message, 0, rinfo)\n    }\n\n    throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n  }\n\n  /**\n   * Internally used method to invoke listener callbacks. Uses regular\n   * expression pattern matching for OSC addresses\n   * @param {string} name OSC address or event name\n   * @param {*} [data] The data of the event\n   * @param {*} [rinfo] Remote address info\n   * @return {boolean} Success state\n   * @private\n   */\n  call(name, data, rinfo) {\n    let success = false\n\n    // call event handlers\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].forEach((handler) => {\n        handler.callback(data, rinfo)\n        success = true\n      })\n\n      return success\n    }\n\n    // call address handlers\n    const handlerKeys = Object.keys(this.addressHandlers)\n    const handlers = this.addressHandlers\n\n    handlerKeys.forEach((key) => {\n      let foundMatch = false\n\n      const regex = new RegExp(prepareRegExPattern(prepareAddress(name)), 'g')\n      const test = regex.test(key)\n\n      // found a matching address in our callback handlers\n      if (test && key.length === regex.lastIndex) {\n        foundMatch = true\n      }\n\n      if (!foundMatch) {\n        // try matching address from callback handlers (when given)\n        const reverseRegex = new RegExp(prepareRegExPattern(prepareAddress(key)), 'g')\n        const reverseTest = reverseRegex.test(name)\n\n        if (reverseTest && name.length === reverseRegex.lastIndex) {\n          foundMatch = true\n        }\n      }\n\n      if (foundMatch) {\n        handlers[key].forEach((handler) => {\n          handler.callback(data, rinfo)\n          success = true\n        })\n      }\n    })\n\n    return success\n  }\n\n  /**\n   * Notify the EventHandler of incoming OSC messages or status\n   * changes (*open*, *close*, *error*). Handles OSC address patterns\n   * and executes timed messages. Use binary arrays when\n   * handling directly incoming network data. Packet's or Messages can\n   * also be used\n   * @param {...*} args\n   * The OSC address pattern / event name as string}. For convenience and\n   * Plugin API communication you can also use Message or Packet instances\n   * or ArrayBuffer, Buffer instances (low-level access). The latter will\n   * automatically be unpacked\n   * When using a string you can also pass on data as a second argument\n   * (any type). All regarding listeners will be notified with this data.\n   * As a third argument you can define a javascript timestamp (number or\n   * Date instance) for timed notification of the listeners.\n   * @param {*} [rinfo] Remote address info\n   * @return {boolean} Success state of notification\n   *\n   * @example\n   * const socket = dgram.createSocket('udp4')\n   * socket.on('message', (message) => {\n   *   this.notify(message)\n   * })\n   *\n   * @example\n   * this.notify('error', error.message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * this.notify(message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * // override timestamp\n   * this.notify(message.address, message, Date.now() + 5000)\n   */\n  notify(...args) {\n    if (args.length === 0) {\n      throw new Error('OSC EventHandler can not be called without any argument')\n    }\n\n    // check for incoming dispatchable OSC data\n    if (args[0] instanceof Packet) {\n      return this.dispatch(args[0], args[1])\n    } else if (args[0] instanceof Bundle || args[0] instanceof Message) {\n      return this.dispatch(new Packet(args[0]), args[1])\n    } else if (!isString(args[0])) {\n      const packet = new Packet()\n      packet.unpack(dataView(args[0]))\n      return this.dispatch(packet, args[1])\n    }\n\n    const name = args[0]\n\n    // data argument\n    let data = null\n\n    if (args.length > 1) {\n      data = args[1]\n    }\n\n    // timestamp argument\n    let timestamp = null\n\n    if (args.length > 2) {\n      if (isInt(args[2])) {\n        timestamp = args[2]\n      } else if (args[2] instanceof Date) {\n        timestamp = args[2].getTime()\n      } else {\n        throw new Error('OSC EventHandler timestamp has to be a number or Date')\n      }\n    }\n\n    // remote address info\n    let rinfo = null\n\n    if (args.length >= 3) {\n      rinfo = args[3]\n    }\n\n    // notify now or later\n    if (timestamp) {\n      const now = Date.now()\n\n      // is message outdated?\n      if (now > timestamp) {\n        if (!this.options.discardLateMessages) {\n          return this.call(name, data, rinfo)\n        }\n      }\n\n      // notify later\n      const that = this\n\n      setTimeout(() => {\n        that.call(name, data, rinfo)\n      }, timestamp - now)\n\n      return true\n    }\n\n    return this.call(name, data, rinfo)\n  }\n\n  /**\n   * Subscribe to a new address or event you want to listen to\n   * @param {string} name The OSC address or event name\n   * @param {function} callback Callback function on notification\n   * @return {number} Subscription identifier (needed to unsubscribe)\n   */\n  on(name, callback) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error('OSC EventHandler callback has to be a function')\n    }\n\n    // get next id\n    this.uuid += 1\n\n    // prepare handler\n    const handler = {\n      id: this.uuid,\n      callback,\n    }\n\n    // register event listener\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].push(handler)\n      return this.uuid\n    }\n\n    // register address listener\n    const address = prepareAddress(name)\n\n    if (!(address in this.addressHandlers)) {\n      this.addressHandlers[address] = []\n    }\n\n    this.addressHandlers[address].push(handler)\n\n    return this.uuid\n  }\n\n  /**\n   * Unsubscribe listener from event notification or address handler\n   * @param {string} name The OSC address or event name\n   * @param {number} subscriptionId Subscription id to identify the handler\n   * @return {boolean} Success state\n   */\n  off(name, subscriptionId) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isInt(subscriptionId)) {\n      throw new Error('OSC EventHandler subscription id has to be a number')\n    }\n\n    let key\n    let haystack\n\n    // event or address listener\n    if (isString(name) && name in this.eventHandlers) {\n      key = name\n      haystack = this.eventHandlers\n    } else {\n      key = prepareAddress(name)\n      haystack = this.addressHandlers\n    }\n\n    // remove the entry\n    if (key in haystack) {\n      return haystack[key].some((item, index) => {\n        if (item.id === subscriptionId) {\n          haystack[key].splice(index, 1)\n          return true\n        }\n\n        return false\n      })\n    }\n\n    return false\n  }\n}\n","const dgram = typeof __dirname !== 'undefined' ? require('dgram') : undefined\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options for open method\n * @private\n */\nconst defaultOpenOptions = {\n  host: 'localhost',\n  port: 41234,\n  exclusive: false,\n}\n\n/**\n * Default options for send method\n * @private\n */\nconst defaultSendOptions = {\n  host: 'localhost',\n  port: 41235,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  type: 'udp4',\n  open: defaultOpenOptions,\n  send: defaultSendOptions,\n}\n\n/**\n * Helper method to merge nested objects\n * @private\n */\nfunction mergeOptions(base, custom) {\n  return {\n    ...defaultOptions,\n    ...base,\n    ...custom,\n    open: { ...defaultOptions.open, ...base.open, ...custom.open },\n    send: { ...defaultOptions.send, ...base.send, ...custom.send },\n  }\n}\n\n/**\n * OSC plugin for simple OSC messaging via udp client\n * and udp server\n */\nexport default class DatagramPlugin {\n  /**\n   * Create an OSC Plugin instance with given options. Defaults to\n   * localhost:41234 for server and localhost:41235 for client messaging\n   * @param {object} [options] Custom options\n   * @param {string} [options.type='udp4'] 'udp4' or 'udp6'\n   * @param {string} [options.open.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [options.open.port=41234] Port of udp server to bind to\n   * @param {boolean} [options.open.exclusive=false] Exclusive flag\n   * @param {string} [options.send.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [options.send.port=41235] Port of udp client for messaging\n   *\n   * @example\n   * const plugin = new OSC.DatagramPlugin({ send: { port: 9912 } })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(customOptions = {}) {\n    if (!dgram) {\n      throw new Error('DatagramPlugin can not be used in browser context')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = mergeOptions({}, customOptions)\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = dgram.createSocket(this.options.type)\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    // register events\n    this.socket.on('message', (message, rinfo) => {\n      this.notify(message, rinfo)\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Bind a udp socket to a hostname and port\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [customOptions.port=41234] Port of udp server to bind to\n   * @param {boolean} [customOptions.exclusive=false] Exclusive flag\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options.open, ...customOptions }\n    const { port, exclusive } = options\n\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    this.socket.bind({\n      address: options.host,\n      port,\n      exclusive,\n    }, () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    })\n  }\n\n  /**\n   * Close udp socket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom port and hostname, otherwise the global options will\n   * be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options for udp socket\n   * @param {string} [customOptions.host] Hostname of udp client\n   * @param {number} [customOptions.port] Port of udp client\n   */\n  send(binary, customOptions = {}) {\n    const options = { ...this.options.send, ...customOptions }\n    const { port, host } = options\n\n    this.socket.send(Buffer.from(binary), 0, binary.byteLength, port, host)\n  }\n}\n","const dgram = typeof __dirname !== 'undefined' ? require('dgram') : undefined\nconst WebSocketServer = typeof __dirname !== 'undefined' ? require('isomorphic-ws').Server : undefined\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  udpServer: {\n    host: 'localhost',\n    port: 41234,\n    exclusive: false,\n  },\n  udpClient: {\n    host: 'localhost',\n    port: 41235,\n  },\n  wsServer: {\n    host: 'localhost',\n    port: 8080,\n  },\n  receiver: 'ws',\n}\n\n/**\n * Helper method to merge nested objects\n * @private\n */\nfunction mergeOptions(base, custom) {\n  return {\n    ...defaultOptions,\n    ...base,\n    ...custom,\n    udpServer: { ...defaultOptions.udpServer, ...base.udpServer, ...custom.udpServer },\n    udpClient: { ...defaultOptions.udpClient, ...base.udpClient, ...custom.udpClient },\n    wsServer: { ...defaultOptions.wsServer, ...base.wsServer, ...custom.wsServer },\n  }\n}\n\n/**\n * OSC plugin for setting up communication between a Websocket\n * client and a udp client with a bridge inbetween\n */\nexport default class BridgePlugin {\n  /**\n   * Create an OSC Bridge instance with given options. Defaults to\n   * localhost:41234 for udp server, localhost:41235 for udp client and\n   * localhost:8080 for Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.udpServer.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [options.udpServer.port=41234] Port of udp server to bind to\n   * @param {boolean} [options.udpServer.exclusive=false] Exclusive flag\n   * @param {string} [options.udpClient.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [options.udpClient.port=41235] Port of udp client for messaging\n   * @param {string} [options.wsServer.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.wsServer.port=8080] Port of Websocket server\n   * @param {string} [options.receiver='ws'] Where messages sent via 'send' method will be\n   * delivered to, 'ws' for Websocket clients, 'udp' for udp client\n   *\n   * @example\n   * const plugin = new OSC.BridgePlugin({ wsServer: { port: 9912 } })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(customOptions = {}) {\n    if (!dgram || !WebSocketServer) {\n      throw new Error('BridgePlugin can not be used in browser context')\n    }\n\n    /** @type {object} options\n     * @private\n     */\n    this.options = mergeOptions({}, customOptions)\n\n    /**\n     * @type {object} websocket\n     * @private\n     */\n    this.websocket = null\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = dgram.createSocket('udp4')\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    // register udp events\n    this.socket.on('message', (message) => {\n      this.send(message, { receiver: 'ws' })\n      this.notify(message.buffer)\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Bind a udp socket to a hostname and port\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [customOptions.port=41234] Port of udp server to bind to\n   * @param {boolean} [customOptions.exclusive=false] Exclusive flag\n   */\n  open(customOptions = {}) {\n    const options = mergeOptions(this.options, customOptions)\n\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // bind udp server\n    this.socket.bind({\n      address: options.udpServer.host,\n      port: options.udpServer.port,\n      exclusive: options.udpServer.exclusive,\n    }, () => {\n      // bind Websocket server\n      this.websocket = new WebSocketServer({\n        host: options.wsServer.host,\n        port: options.wsServer.port,\n      })\n      this.websocket.binaryType = 'arraybuffer'\n\n      // register Websocket events\n      this.websocket.on('listening', () => {\n        this.socketStatus = STATUS.IS_OPEN\n        this.notify('open')\n      })\n\n      this.websocket.on('error', (error) => {\n        this.notify('error', error)\n      })\n\n      this.websocket.on('connection', (client) => {\n        client.on('message', (message, rinfo) => {\n          this.send(message, { receiver: 'udp' })\n          this.notify(new Uint8Array(message), rinfo)\n        })\n      })\n    })\n  }\n\n  /**\n   * Close udp socket and Websocket server\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    // close udp socket\n    this.socket.close(() => {\n      // close Websocket\n      this.websocket.close(() => {\n        this.socketStatus = STATUS.IS_CLOSED\n        this.notify('close')\n      })\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom receiver, otherwise the global options will be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.udpClient.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [customOptions.udpClient.port=41235] Port of udp client for messaging\n   * @param {string} [customOptions.receiver='ws'] Messages will be delivered to Websocket ('ws')\n   * clients or udp client ('udp')\n   */\n  send(binary, customOptions = {}) {\n    const options = mergeOptions(this.options, customOptions)\n    const { receiver } = options\n\n    if (receiver === 'udp') {\n      // send data to udp client\n      const data = binary instanceof Buffer ? binary : Buffer.from(binary)\n      this.socket.send(\n        data,\n        0,\n        data.byteLength,\n        options.udpClient.port,\n        options.udpClient.host,\n      )\n    } else if (receiver === 'ws') {\n      // send data to all Websocket clients\n      this.websocket.clients.forEach((client) => {\n        client.send(binary, { binary: true })\n      })\n    } else {\n      throw new Error('BridgePlugin can not send message to unknown receiver')\n    }\n  }\n}\n","// eslint-disable-next-line no-undef\nconst scope = typeof global === 'undefined' ? window : global\nconst WebSocket = typeof __dirname === 'undefined' ? scope.WebSocket : require('isomorphic-ws')\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n  secure: false,\n}\n\n/**\n * OSC plugin for a Websocket client running in node or browser context\n */\nexport default class WebsocketClientPlugin {\n  /**\n   * Create an OSC WebsocketClientPlugin instance with given options.\n   * Defaults to *localhost:8080* for connecting to a Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   * @param {boolean} [options.secure=false] Use wss:// for secure connections\n   *\n   * @example\n   * const plugin = new OSC.WebsocketClientPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(customOptions) {\n    if (!WebSocket) {\n      throw new Error('WebsocketClientPlugin can\\'t find a WebSocket class')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...customOptions }\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Connect to a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   * @param {boolean} [customOptions.secure] Use wss:// for secure connections\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options, ...customOptions }\n    const { port, host, secure } = options\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket client\n    const protocol = secure ? 'wss' : 'ws'\n    const rinfo = {\n      address: host,\n      family: protocol,\n      port,\n      size: 0,\n    }\n\n    this.socket = new WebSocket(`${protocol}://${host}:${port}`)\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.onopen = () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    }\n\n    this.socket.onclose = () => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    }\n\n    this.socket.onerror = (error) => {\n      this.notify('error', error)\n    }\n\n    this.socket.onmessage = (message) => {\n      this.notify(message.data, rinfo)\n    }\n  }\n\n  /**\n   * Close Websocket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n    this.socket.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket server\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.send(binary)\n  }\n}\n","const WebSocketServer = typeof __dirname !== 'undefined' ? require('isomorphic-ws').Server : undefined\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n}\n\n/**\n * OSC plugin for a Websocket client running in node or browser context\n */\nexport default class WebsocketServerPlugin {\n  /**\n   * Create an OSC WebsocketServerPlugin instance with given options.\n   * Defaults to *localhost:8080* for the Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   *\n   * @example\n   * const plugin = new OSC.WebsocketServerPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   *\n   * osc.open() // start server\n   */\n  constructor(customOptions) {\n    if (!WebSocketServer) {\n      throw new Error('WebsocketServerPlugin can not be used in browser context')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...customOptions }\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Start a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options, ...customOptions }\n    const { port, host } = options\n    const rinfo = {\n      address: host,\n      family: 'wsserver',\n      port,\n      size: 0,\n    }\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket server\n    this.socket = new WebSocketServer({ host, port })\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.on('listening', () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    this.socket.on('connection', (client) => {\n      client.on('message', (message) => {\n        this.notify(new Uint8Array(message), rinfo)\n      })\n    })\n  }\n\n  /**\n   * Close Websocket server\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket clients\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.clients.forEach((client) => {\n      client.send(binary, { binary: true })\n    })\n  }\n}\n","import {\n  isFunction,\n  isInt,\n  isObject,\n  isString,\n} from './common/utils'\n\nimport Bundle from './bundle'\nimport EventHandler from './events'\nimport Message from './message'\nimport Packet from './packet'\n\nimport DatagramPlugin from './plugin/dgram'\nimport BridgePlugin from './plugin/bridge'\nimport WebsocketClientPlugin from './plugin/wsclient'\nimport WebsocketServerPlugin from './plugin/wsserver'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  discardLateMessages: false,\n  plugin: new WebsocketClientPlugin(),\n}\n\n/**\n * Status flags\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * OSC interface to send OSC Packets and listen to status changes and\n * incoming message events. Offers a Plugin API for different network\n * protocols, defaults to a simple Websocket client for OSC communication\n * between a browser js-app and a js-node server\n *\n * @example\n * const osc = new OSC()\n *\n * osc.on('/input/test', message => {\n *   // print incoming OSC message arguments\n *   console.log(message.args)\n * })\n *\n * osc.on('open', () => {\n *   const message = new Message('/test/path', 55.12, 'hello')\n *   osc.send(message)\n * })\n *\n * osc.open({ host: '192.168.178.115', port: 9012 })\n */\nclass OSC {\n  /**\n   * Create an OSC instance with given options\n   * @param {object} [options] Custom options\n   * @param {boolean} [options.discardLateMessages=false] Ignore incoming\n   * messages when given timetag lies in the past\n   * @param {Plugin} [options.plugin=WebsocketClientPlugin] Add a connection plugin\n   * to this interface, defaults to a plugin with Websocket client.\n   * Open README.md for further information on how to handle plugins or\n   * how to write your own with the Plugin API\n   *\n   * @example\n   * const osc = new OSC() // default options with Websocket client\n   *\n   * @example\n   * const osc = new OSC({ discardLateMessages: true })\n   *\n   * @example\n   * const websocketPlugin = new OSC.WebsocketClientPlugin()\n   * const osc = new OSC({ plugin: websocketPlugin })\n   */\n  constructor(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC options argument has to be an object.')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n    /**\n     * @type {EventHandler} eventHandler\n     * @private\n     */\n    this.eventHandler = new EventHandler({\n      discardLateMessages: this.options.discardLateMessages,\n    })\n\n    // pass EventHandler's notify() to plugin\n    const { eventHandler } = this\n    if (this.options.plugin && this.options.plugin.registerNotify) {\n      this.options.plugin.registerNotify((...args) => eventHandler.notify(...args))\n    }\n  }\n\n  /**\n   * Listen to a status-change event or incoming OSC message with\n   * address pattern matching\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {function} callback Function which is called on notification\n   * @return {number} Subscription id (needed to unsubscribe)\n   *\n   * @example\n   * // will be called when server receives /in!trument/* for example\n   * osc.on('/instrument/1', message => {\n   *   console.log(message)\n   * })\n   *\n   * @example\n   * // will be called for every message since it uses the wildcard symbol\n   * osc.on('*', message => {\n   *   console.log(message)\n   * })\n   *\n   * @example\n   * // will be called on network socket error\n   * osc.on('error', message => {\n   *   console.log(message)\n   * })\n   */\n  on(eventName, callback) {\n    if (!(isString(eventName) && isFunction(callback))) {\n      throw new Error('OSC on() needs event- or address string and callback function')\n    }\n\n    return this.eventHandler.on(eventName, callback)\n  }\n\n  /**\n   * Unsubscribe an event listener\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {number} subscriptionId The subscription id\n   * @return {boolean} Success state\n   *\n   * @example\n   * const listenerId = osc.on('error', message => {\n   *   console.log(message)\n   * })\n   * osc.off('error', listenerId) // unsubscribe from error event\n   */\n  off(eventName, subscriptionId) {\n    if (!(isString(eventName) && isInt(subscriptionId))) {\n      throw new Error('OSC off() needs string and number (subscriptionId) to unsubscribe')\n    }\n\n    return this.eventHandler.off(eventName, subscriptionId)\n  }\n\n  /**\n   * Open network socket with plugin. This method is used by\n   * plugins and is not available without (see Plugin API for more information)\n   * @param {object} [options] Custom global options for plugin instance\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   */\n  open(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC open() options argument needs to be an object')\n    }\n\n    if (!(this.options.plugin && isFunction(this.options.plugin.open))) {\n      throw new Error('OSC Plugin API #open is not implemented!')\n    }\n\n    return this.options.plugin.open(options)\n  }\n\n  /**\n   * Returns the current status of the connection. See *STATUS* for\n   * different possible states. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @return {number} Status identifier\n   *\n   * @example\n   * import OSC, { STATUS } from 'osc'\n   * const osc = new OSC()\n   * if (osc.status() === STATUS.IS_CONNECTING) {\n   *   // do something\n   * }\n   */\n  status() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.status))) {\n      throw new Error('OSC Plugin API #status is not implemented!')\n    }\n\n    return this.options.plugin.status()\n  }\n\n  /**\n   * Close connection. This method is used by plugins and is not\n   * available without (see Plugin API for more information)\n   */\n  close() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.close))) {\n      throw new Error('OSC Plugin API #close is not implemented!')\n    }\n\n    return this.options.plugin.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @param {Packet|Bundle|Message} packet OSC Packet, Bundle or Message instance\n   * @param {object} [options] Custom options\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   *\n   * const message = new OSC.Message('/test/path', 55.1, 57)\n   * osc.send(message)\n   *\n   * // send message again to custom address\n   * osc.send(message, { host: '192.168.178.115', port: 9001 })\n   */\n  send(packet, options) {\n    if (!(this.options.plugin && isFunction(this.options.plugin.send))) {\n      throw new Error('OSC Plugin API #send is not implemented!')\n    }\n\n    if (!(packet instanceof Message || packet instanceof Bundle || packet instanceof Packet)) {\n      throw new Error('OSC send() needs Messages, Bundles or Packets')\n    }\n\n    if (options && !isObject(options)) {\n      throw new Error('OSC send() options argument has to be an object')\n    }\n\n    return this.options.plugin.send(packet.pack(), options)\n  }\n}\n\n// expose status flags\nOSC.STATUS = STATUS\n\n// expose OSC classes\nOSC.Packet = Packet\nOSC.Bundle = Bundle\nOSC.Message = Message\n\n// expose plugins\nOSC.DatagramPlugin = DatagramPlugin\nOSC.WebsocketClientPlugin = WebsocketClientPlugin\nOSC.WebsocketServerPlugin = WebsocketServerPlugin\nOSC.BridgePlugin = BridgePlugin\n\nexport default OSC\n"],"names":["isInt","n","Number","isFloat","isString","isArray","Object","prototype","toString","call","isObject","isFunction","isBlob","Uint8Array","isUndefined","pad","hasProperty","name","hasOwnProperty","global","window","typeTag","item","Error","prepareAddress","obj","address","join","length","slice","prepareRegExPattern","str","replace","EncodeHelper","buffer","pack","byteLength","data","push","this","result","offset","forEach","set","Atomic","method","dataView","DataView","value","initialOffset","AtomicInt32","STR_ENCODING","AtomicString","terminated","i","charCodeAt","charcode","charCodes","getUint8","Buffer","from","TextDecoder","decode","Int8Array","String","fromCharCode","apply","charCodesToString","SECONDS_70_YEARS","TWO_POWER_32","Timetag","milliseconds","seconds","Math","round","fractions","rounded","floor","AtomicTimetag","setInt32","getUint32","Date","now","timetag","timestamp","isDate","getTime","AtomicBlob","getInt32","AtomicFloat32","Message","args","types","argument","encoder","Helper","add","merge","unpack","next","type","shift","map","BUNDLE_TAG","Bundle","ms","bundleElements","parentHead","head","_this","Packet","defaultOptions","discardLateMessages","EventHandler","packet","rinfo","bundle","bundleItem","dispatch","message","notify","success","eventHandlers","handler","callback","handlerKeys","keys","addressHandlers","handlers","key","foundMatch","regex","RegExp","test","lastIndex","reverseRegex","ArrayBuffer","options","that","setTimeout","uuid","id","subscriptionId","haystack","some","index","splice","open","error","close","dgram","__dirname","require","undefined","STATUS","host","port","exclusive","send","DatagramPlugin","fn","socketStatus","customOptions","socket","bind","_this2","_this3","binary","base","custom","mergeOptions","createSocket","on","WebSocketServer","Server","udpServer","udpClient","wsServer","receiver","BridgePlugin","websocket","binaryType","client","clients","scope","WebSocket","secure","WebsocketClientPlugin","protocol","family","size","onopen","onclose","onerror","onmessage","WebsocketServerPlugin","plugin","OSC","eventName","eventHandler","off","status","registerNotify","IS_NOT_INITIALIZED","IS_CONNECTING","IS_OPEN","IS_CLOSING","IS_CLOSED"],"mappings":"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"}